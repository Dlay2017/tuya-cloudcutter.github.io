
build/bk7231n-proper-v1.o:     file format elf32-littlearm


Disassembly of section .text:

00120000 <main>:
	LAN_AP_NW_CFG_S *lan = (LAN_AP_NW_CFG_S *)(data - 0x58);

	uint8_t *start = (uint8_t *)(0x10000);
	uint8_t *end   = (uint8_t *)(start + 0x107800);

	if (intf->search_performed != 0xDEADBEEF) {
  120000:	680b      	ldr	r3, [r1, #0]
int main(uint8_t *data, FW_INTERFACE *intf, uint32_t command) {
  120002:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  120004:	0016      	movs	r6, r2
	if (intf->search_performed != 0xDEADBEEF) {
  120006:	001a      	movs	r2, r3
  120008:	4b24      	ldr	r3, [pc, #144]	; (12009c <main+0x9c>)
int main(uint8_t *data, FW_INTERFACE *intf, uint32_t command) {
  12000a:	0005      	movs	r5, r0
  12000c:	000c      	movs	r4, r1
	if (intf->search_performed != 0xDEADBEEF) {
  12000e:	429a      	cmp	r2, r3
  120010:	d10d      	bne.n	12002e <main+0x2e>
		if (intf->search_performed != 0xDEADBEEF)
			return 1;
	}

	uint32_t *data32	= (uint32_t *)data;
	uint32_t request_id = data32[0];
  120012:	6829      	ldr	r1, [r5, #0]
	uint32_t address	= data32[1];
  120014:	686a      	ldr	r2, [r5, #4]

	LOG("cmd=%02x\n", command);

	switch (command) {
  120016:	2e0e      	cmp	r6, #14
  120018:	d035      	beq.n	120086 <main+0x86>
  12001a:	2e10      	cmp	r6, #16
  12001c:	d038      	beq.n	120090 <main+0x90>
  12001e:	2e01      	cmp	r6, #1
  120020:	d103      	bne.n	12002a <main+0x2a>
		case 0x01:
			cmd_flash_read(intf, request_id, address, data32);
  120022:	002b      	movs	r3, r5
  120024:	0020      	movs	r0, r4
  120026:	f000 f89f 	bl	120168 <cmd_flash_read>
		case 0x10:
			cmd_fill_intf(intf, request_id, address, data32);
			break;
	}

	return 0;
  12002a:	2000      	movs	r0, #0
  12002c:	e02a      	b.n	120084 <main+0x84>
		func_start = find_function(intf, start, end, "ap_cfg_send_err_code", 0xB5F0);
  12002e:	2180      	movs	r1, #128	; 0x80
  120030:	4b1b      	ldr	r3, [pc, #108]	; (1200a0 <main+0xa0>)
  120032:	4a1c      	ldr	r2, [pc, #112]	; (1200a4 <main+0xa4>)
  120034:	9300      	str	r3, [sp, #0]
  120036:	0249      	lsls	r1, r1, #9
  120038:	4b1b      	ldr	r3, [pc, #108]	; (1200a8 <main+0xa8>)
  12003a:	0020      	movs	r0, r4
  12003c:	f000 f961 	bl	120302 <find_function>
		func_end = find_short(func_start, end, 0xBDF0) + 2;
  120040:	4a1a      	ldr	r2, [pc, #104]	; (1200ac <main+0xac>)
  120042:	4918      	ldr	r1, [pc, #96]	; (1200a4 <main+0xa4>)
		func_start = find_function(intf, start, end, "ap_cfg_send_err_code", 0xB5F0);
  120044:	0007      	movs	r7, r0
		func_end = find_short(func_start, end, 0xBDF0) + 2;
  120046:	f000 f93f 	bl	1202c8 <find_short>
		func_start = find_function(intf, start, end, "sys_stop_timer", 0xB530);
  12004a:	2180      	movs	r1, #128	; 0x80
  12004c:	4b18      	ldr	r3, [pc, #96]	; (1200b0 <main+0xb0>)
		func_end = find_short(func_start, end, 0xBDF0) + 2;
  12004e:	3002      	adds	r0, #2
		intf->ap_cfg_send_err_code	   = (ap_cfg_send_err_code_t)func_start;
  120050:	64e7      	str	r7, [r4, #76]	; 0x4c
		intf->ap_cfg_send_err_code_end = func_end;
  120052:	6520      	str	r0, [r4, #80]	; 0x50
		func_start = find_function(intf, start, end, "sys_stop_timer", 0xB530);
  120054:	9300      	str	r3, [sp, #0]
  120056:	4a13      	ldr	r2, [pc, #76]	; (1200a4 <main+0xa4>)
  120058:	4b16      	ldr	r3, [pc, #88]	; (1200b4 <main+0xb4>)
  12005a:	0249      	lsls	r1, r1, #9
  12005c:	0020      	movs	r0, r4
  12005e:	f000 f950 	bl	120302 <find_function>
		func_end = find_short(func_start, end, 0xBD30) + 2;
  120062:	4a15      	ldr	r2, [pc, #84]	; (1200b8 <main+0xb8>)
  120064:	490f      	ldr	r1, [pc, #60]	; (1200a4 <main+0xa4>)
		func_start = find_function(intf, start, end, "sys_stop_timer", 0xB530);
  120066:	0007      	movs	r7, r0
		func_end = find_short(func_start, end, 0xBD30) + 2;
  120068:	f000 f92e 	bl	1202c8 <find_short>
  12006c:	3002      	adds	r0, #2
		intf->sys_stop_timer_end = func_end;
  12006e:	66e0      	str	r0, [r4, #108]	; 0x6c
		intf->sys_stop_timer	 = (sys_stop_timer_t)func_start;
  120070:	66a7      	str	r7, [r4, #104]	; 0x68
		find_app_intf(intf);
  120072:	0020      	movs	r0, r4
  120074:	f000 f969 	bl	12034a <find_app_intf>
		if (intf->search_performed != 0xDEADBEEF)
  120078:	6823      	ldr	r3, [r4, #0]
			return 1;
  12007a:	2001      	movs	r0, #1
		if (intf->search_performed != 0xDEADBEEF)
  12007c:	001a      	movs	r2, r3
  12007e:	4b07      	ldr	r3, [pc, #28]	; (12009c <main+0x9c>)
  120080:	429a      	cmp	r2, r3
  120082:	d0c6      	beq.n	120012 <main+0x12>
}
  120084:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
			cmd_stop_timer(intf, request_id, address, data32);
  120086:	002b      	movs	r3, r5
  120088:	0020      	movs	r0, r4
  12008a:	f000 f8ad 	bl	1201e8 <cmd_stop_timer>
  12008e:	e7cc      	b.n	12002a <main+0x2a>
			cmd_fill_intf(intf, request_id, address, data32);
  120090:	002b      	movs	r3, r5
  120092:	0020      	movs	r0, r4
  120094:	f000 f8ec 	bl	120270 <cmd_fill_intf>
  120098:	e7c7      	b.n	12002a <main+0x2a>
  12009a:	46c0      	nop			; (mov r8, r8)
  12009c:	deadbeef 	.word	0xdeadbeef
  1200a0:	0000b5f0 	.word	0x0000b5f0
  1200a4:	00117800 	.word	0x00117800
  1200a8:	0012041a 	.word	0x0012041a
  1200ac:	0000bdf0 	.word	0x0000bdf0
  1200b0:	0000b530 	.word	0x0000b530
  1200b4:	0012042f 	.word	0x0012042f
  1200b8:	0000bd30 	.word	0x0000bd30

001200bc <parse_branch>:
#include "dump.h"

uint8_t *parse_branch(uint16_t *data) {
	uint32_t address = (uint32_t)data;

	int16_t poff = data[0];
  1200bc:	8802      	ldrh	r2, [r0, #0]
uint8_t *parse_branch(uint16_t *data) {
  1200be:	0001      	movs	r1, r0
  1200c0:	b510      	push	{r4, lr}
	if (((poff >> 11) & 0b11111) != 0b11110)
  1200c2:	0ad3      	lsrs	r3, r2, #11
		return NULL;
  1200c4:	2000      	movs	r0, #0
	if (((poff >> 11) & 0b11111) != 0b11110)
  1200c6:	2b1e      	cmp	r3, #30
  1200c8:	d10a      	bne.n	1200e0 <parse_branch+0x24>
	uint16_t offs = data[1];
  1200ca:	884b      	ldrh	r3, [r1, #2]
	if (((offs >> 11) & 0b11111) != 0b11111)
  1200cc:	0adc      	lsrs	r4, r3, #11
  1200ce:	2c1f      	cmp	r4, #31
  1200d0:	d106      	bne.n	1200e0 <parse_branch+0x24>
		return NULL;

	poff <<= 5;
	poff >>= 5;
	offs <<= 5;
  1200d2:	055b      	lsls	r3, r3, #21
	poff <<= 5;
  1200d4:	0552      	lsls	r2, r2, #21
	offs >>= 5;
	return (uint8_t *)(address + 4 + (poff << 12) + offs * 2);
  1200d6:	0d1b      	lsrs	r3, r3, #20
  1200d8:	1d08      	adds	r0, r1, #4
  1200da:	1818      	adds	r0, r3, r0
  1200dc:	1252      	asrs	r2, r2, #9
  1200de:	1880      	adds	r0, r0, r2
}
  1200e0:	bd10      	pop	{r4, pc}

001200e2 <parse_ldr_pc>:

uint32_t *parse_ldr_pc(uint16_t *data, uint8_t *reg) {
	uint32_t address = (uint32_t)data;

	uint8_t opc = *data >> 8;
	if (((opc >> 3) & 0b01001) != 0b01001)
  1200e2:	2309      	movs	r3, #9
	uint8_t opc = *data >> 8;
  1200e4:	8802      	ldrh	r2, [r0, #0]
uint32_t *parse_ldr_pc(uint16_t *data, uint8_t *reg) {
  1200e6:	b510      	push	{r4, lr}
	uint8_t opc = *data >> 8;
  1200e8:	0a12      	lsrs	r2, r2, #8
  1200ea:	0612      	lsls	r2, r2, #24
  1200ec:	0e14      	lsrs	r4, r2, #24
	if (((opc >> 3) & 0b01001) != 0b01001)
  1200ee:	0ed2      	lsrs	r2, r2, #27
  1200f0:	401a      	ands	r2, r3
		return NULL;
  1200f2:	2300      	movs	r3, #0
	if (((opc >> 3) & 0b01001) != 0b01001)
  1200f4:	2a09      	cmp	r2, #9
  1200f6:	d10b      	bne.n	120110 <parse_ldr_pc+0x2e>
	if (reg)
  1200f8:	4299      	cmp	r1, r3
  1200fa:	d002      	beq.n	120102 <parse_ldr_pc+0x20>
		*reg = opc & 0b111;
  1200fc:	3307      	adds	r3, #7
  1200fe:	4023      	ands	r3, r4
  120100:	700b      	strb	r3, [r1, #0]

	uint8_t immed = *data & 0xFF;

	uint32_t target = address + 2 + (immed << 2);
	return (uint32_t *)((((target - 1) / 4) + 1) * 4);
  120102:	2203      	movs	r2, #3
	uint32_t target = address + 2 + (immed << 2);
  120104:	7803      	ldrb	r3, [r0, #0]
	return (uint32_t *)((((target - 1) / 4) + 1) * 4);
  120106:	3001      	adds	r0, #1
	uint32_t target = address + 2 + (immed << 2);
  120108:	009b      	lsls	r3, r3, #2
	return (uint32_t *)((((target - 1) / 4) + 1) * 4);
  12010a:	181b      	adds	r3, r3, r0
  12010c:	4393      	bics	r3, r2
  12010e:	3304      	adds	r3, #4
}
  120110:	0018      	movs	r0, r3
  120112:	bd10      	pop	{r4, pc}

00120114 <cmd_send_response>:
/* Copyright (c) Kuba SzczodrzyÅ„ski 2022-09-26. */

#include "dump.h"

void cmd_send_response(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint8_t *data, uint16_t len) {
  120114:	b5f0      	push	{r4, r5, r6, r7, lr}
  120116:	0005      	movs	r5, r0
  120118:	b085      	sub	sp, #20
  12011a:	001c      	movs	r4, r3
  12011c:	ab0a      	add	r3, sp, #40	; 0x28
  12011e:	881f      	ldrh	r7, [r3, #0]
	int fd = intf->socket(1);
  120120:	2001      	movs	r0, #1
  120122:	6d6b      	ldr	r3, [r5, #84]	; 0x54
void cmd_send_response(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint8_t *data, uint16_t len) {
  120124:	9102      	str	r1, [sp, #8]
  120126:	9203      	str	r2, [sp, #12]
	int fd = intf->socket(1);
  120128:	4798      	blx	r3
  12012a:	1e06      	subs	r6, r0, #0
	if (fd < 0)
  12012c:	db17      	blt.n	12015e <cmd_send_response+0x4a>
		return;
	LOG("Got fd %01x, send to %08x\n", fd, address);

	uint32_t crc = intf->crc32(0, data, len);
  12012e:	0021      	movs	r1, r4
  120130:	003a      	movs	r2, r7
  120132:	69ab      	ldr	r3, [r5, #24]
  120134:	2000      	movs	r0, #0
  120136:	4798      	blx	r3
	data -= 8;
	len += 8;
	uint32_t *data32 = (uint32_t *)data;
	data32[0]		 = request_id;
  120138:	0021      	movs	r1, r4
	len += 8;
  12013a:	003a      	movs	r2, r7
	data32[0]		 = request_id;
  12013c:	9b02      	ldr	r3, [sp, #8]
  12013e:	3908      	subs	r1, #8
  120140:	600b      	str	r3, [r1, #0]
	len += 8;
  120142:	3208      	adds	r2, #8
	data32[1]		 = crc;

	int ret = intf->sendto(fd, data, len, address, 6667);
  120144:	4b07      	ldr	r3, [pc, #28]	; (120164 <cmd_send_response+0x50>)
	data32[1]		 = crc;
  120146:	3c04      	subs	r4, #4
	int ret = intf->sendto(fd, data, len, address, 6667);
  120148:	0412      	lsls	r2, r2, #16
	data32[1]		 = crc;
  12014a:	6020      	str	r0, [r4, #0]
	int ret = intf->sendto(fd, data, len, address, 6667);
  12014c:	0c12      	lsrs	r2, r2, #16
  12014e:	9300      	str	r3, [sp, #0]
  120150:	0030      	movs	r0, r6
  120152:	9b03      	ldr	r3, [sp, #12]
  120154:	6e2c      	ldr	r4, [r5, #96]	; 0x60
  120156:	47a0      	blx	r4
	LOG("ret=%01x, len=%01x\n", ret, len);

	intf->close(fd);
  120158:	6e6b      	ldr	r3, [r5, #100]	; 0x64
  12015a:	0030      	movs	r0, r6
  12015c:	4798      	blx	r3
}
  12015e:	b005      	add	sp, #20
  120160:	bdf0      	pop	{r4, r5, r6, r7, pc}
  120162:	46c0      	nop			; (mov r8, r8)
  120164:	00001a0b 	.word	0x00001a0b

00120168 <cmd_flash_read>:

void cmd_flash_read(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  120168:	b5f0      	push	{r4, r5, r6, r7, lr}
  12016a:	0006      	movs	r6, r0
  12016c:	b08b      	sub	sp, #44	; 0x2c
  12016e:	9207      	str	r2, [sp, #28]
	// data32[5] - max packet length

	uint8_t *buf	= (uint8_t *)data32[2];
	uint32_t *buf32 = (uint32_t *)buf;

	uint32_t offset = data32[3];
  120170:	68da      	ldr	r2, [r3, #12]
	uint8_t *buf	= (uint8_t *)data32[2];
  120172:	689f      	ldr	r7, [r3, #8]
	uint32_t offset = data32[3];
  120174:	9203      	str	r2, [sp, #12]
	uint32_t length = data32[4];
  120176:	691a      	ldr	r2, [r3, #16]
	uint32_t maxlen = data32[5];
  120178:	695b      	ldr	r3, [r3, #20]
void cmd_flash_read(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  12017a:	9106      	str	r1, [sp, #24]
	uint32_t length = data32[4];
  12017c:	9202      	str	r2, [sp, #8]
	uint32_t maxlen = data32[5];
  12017e:	9304      	str	r3, [sp, #16]

	LOG("Read %x from %06x\n", length, offset);

#ifdef BK7231N
	uint32_t temp;
	DD_HANDLE ddev = intf->ddev_open("flash", &temp, 0);
  120180:	2200      	movs	r2, #0
  120182:	a909      	add	r1, sp, #36	; 0x24
  120184:	4817      	ldr	r0, [pc, #92]	; (1201e4 <cmd_flash_read+0x7c>)
  120186:	6873      	ldr	r3, [r6, #4]
  120188:	4798      	blx	r3
  12018a:	9005      	str	r0, [sp, #20]
#endif

	while (length && maxlen) {
  12018c:	9b02      	ldr	r3, [sp, #8]
  12018e:	2b00      	cmp	r3, #0
  120190:	d002      	beq.n	120198 <cmd_flash_read+0x30>
  120192:	9b04      	ldr	r3, [sp, #16]
  120194:	2b00      	cmp	r3, #0
  120196:	d104      	bne.n	1201a2 <cmd_flash_read+0x3a>
		offset += to_read;
		length -= to_read;
	}

#ifdef BK7231N
	intf->ddev_close(ddev);
  120198:	68b3      	ldr	r3, [r6, #8]
  12019a:	9805      	ldr	r0, [sp, #20]
  12019c:	4798      	blx	r3
#endif
}
  12019e:	b00b      	add	sp, #44	; 0x2c
  1201a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uint32_t to_read = MIN(length, maxlen);
  1201a2:	9c02      	ldr	r4, [sp, #8]
  1201a4:	9b04      	ldr	r3, [sp, #16]
  1201a6:	429c      	cmp	r4, r3
  1201a8:	d900      	bls.n	1201ac <cmd_flash_read+0x44>
  1201aa:	001c      	movs	r4, r3
		intf->ddev_read(ddev, buf + 8, to_read, offset);
  1201ac:	0039      	movs	r1, r7
		buf32[0] = offset;
  1201ae:	9b03      	ldr	r3, [sp, #12]
		intf->ddev_read(ddev, buf + 8, to_read, offset);
  1201b0:	0022      	movs	r2, r4
		buf32[0] = offset;
  1201b2:	603b      	str	r3, [r7, #0]
		intf->ddev_read(ddev, buf + 8, to_read, offset);
  1201b4:	3108      	adds	r1, #8
		buf32[1] = to_read;
  1201b6:	607c      	str	r4, [r7, #4]
		intf->ddev_read(ddev, buf + 8, to_read, offset);
  1201b8:	9805      	ldr	r0, [sp, #20]
  1201ba:	68f5      	ldr	r5, [r6, #12]
  1201bc:	47a8      	blx	r5
		cmd_send_response(intf, request_id, address, buf, to_read + 8);
  1201be:	0023      	movs	r3, r4
  1201c0:	3308      	adds	r3, #8
  1201c2:	041b      	lsls	r3, r3, #16
  1201c4:	0c1b      	lsrs	r3, r3, #16
  1201c6:	9300      	str	r3, [sp, #0]
  1201c8:	9a07      	ldr	r2, [sp, #28]
  1201ca:	003b      	movs	r3, r7
  1201cc:	9906      	ldr	r1, [sp, #24]
  1201ce:	0030      	movs	r0, r6
  1201d0:	f7ff ffa0 	bl	120114 <cmd_send_response>
		offset += to_read;
  1201d4:	9b03      	ldr	r3, [sp, #12]
  1201d6:	191b      	adds	r3, r3, r4
  1201d8:	9303      	str	r3, [sp, #12]
		length -= to_read;
  1201da:	9b02      	ldr	r3, [sp, #8]
  1201dc:	1b1b      	subs	r3, r3, r4
  1201de:	9302      	str	r3, [sp, #8]
  1201e0:	e7d4      	b.n	12018c <cmd_flash_read+0x24>
  1201e2:	46c0      	nop			; (mov r8, r8)
  1201e4:	0012043e 	.word	0x0012043e

001201e8 <cmd_stop_timer>:

void cmd_stop_timer(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  1201e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	bool period_mode	= data32[3] >> 8;
	uint8_t timer_count = data32[3] & 0xFF;

	uint16_t loops = 0;

	for (uint8_t i = 0; i < timer_count; i++) {
  1201ea:	2400      	movs	r4, #0
void cmd_stop_timer(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  1201ec:	001f      	movs	r7, r3
  1201ee:	0006      	movs	r6, r0
	uint16_t loops = 0;
  1201f0:	0025      	movs	r5, r4
	uint32_t *buf32 = (uint32_t *)data32[2];
  1201f2:	689b      	ldr	r3, [r3, #8]
void cmd_stop_timer(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  1201f4:	b089      	sub	sp, #36	; 0x24
	uint32_t *buf32 = (uint32_t *)data32[2];
  1201f6:	9302      	str	r3, [sp, #8]
	bool period_mode	= data32[3] >> 8;
  1201f8:	68fb      	ldr	r3, [r7, #12]
void cmd_stop_timer(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  1201fa:	9207      	str	r2, [sp, #28]
	bool period_mode	= data32[3] >> 8;
  1201fc:	0a1a      	lsrs	r2, r3, #8
  1201fe:	9203      	str	r2, [sp, #12]
	uint8_t timer_count = data32[3] & 0xFF;
  120200:	061a      	lsls	r2, r3, #24
  120202:	0e12      	lsrs	r2, r2, #24
  120204:	0093      	lsls	r3, r2, #2
void cmd_stop_timer(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  120206:	9106      	str	r1, [sp, #24]
	uint8_t timer_count = data32[3] & 0xFF;
  120208:	9204      	str	r2, [sp, #16]
  12020a:	9305      	str	r3, [sp, #20]
	for (uint8_t i = 0; i < timer_count; i++) {
  12020c:	9b05      	ldr	r3, [sp, #20]
  12020e:	429c      	cmp	r4, r3
  120210:	d109      	bne.n	120226 <cmd_stop_timer+0x3e>

		buf32[i] = intf->sys_stop_timer(timer_id);
		LOG("Stop tmr %02x ret=%x\n", timer_id, buf32[i]);
	}

	cmd_send_response(intf, request_id, address, (uint8_t *)buf32, timer_count * 4);
  120212:	9b04      	ldr	r3, [sp, #16]
  120214:	9a07      	ldr	r2, [sp, #28]
  120216:	009b      	lsls	r3, r3, #2
  120218:	9300      	str	r3, [sp, #0]
  12021a:	9906      	ldr	r1, [sp, #24]
  12021c:	9b02      	ldr	r3, [sp, #8]
  12021e:	0030      	movs	r0, r6
  120220:	f7ff ff78 	bl	120114 <cmd_send_response>
  120224:	e01a      	b.n	12025c <cmd_stop_timer+0x74>
		uint32_t timer_id = data32[4 + i];
  120226:	193b      	adds	r3, r7, r4
  120228:	6918      	ldr	r0, [r3, #16]
		if (period_mode) {
  12022a:	9b03      	ldr	r3, [sp, #12]
  12022c:	2b00      	cmp	r3, #0
  12022e:	d01a      	beq.n	120266 <cmd_stop_timer+0x7e>
			uint32_t *handle = intf->sys_timer_handle;
  120230:	6f32      	ldr	r2, [r6, #112]	; 0x70
  120232:	0013      	movs	r3, r2
			while (handle[4] != period) {
  120234:	6919      	ldr	r1, [r3, #16]
  120236:	4281      	cmp	r1, r0
  120238:	d108      	bne.n	12024c <cmd_stop_timer+0x64>
			if (handle[4] != period) {
  12023a:	691a      	ldr	r2, [r3, #16]
  12023c:	4282      	cmp	r2, r0
  12023e:	d00f      	beq.n	120260 <cmd_stop_timer+0x78>
				buf32[i] = -1;
  120240:	2201      	movs	r2, #1
  120242:	9b02      	ldr	r3, [sp, #8]
  120244:	4252      	negs	r2, r2
  120246:	511a      	str	r2, [r3, r4]
  120248:	3404      	adds	r4, #4
  12024a:	e7df      	b.n	12020c <cmd_stop_timer+0x24>
				handle = (uint32_t *)(handle[0]);
  12024c:	681b      	ldr	r3, [r3, #0]
				if (handle == intf->sys_timer_handle) {
  12024e:	429a      	cmp	r2, r3
  120250:	d0f3      	beq.n	12023a <cmd_stop_timer+0x52>
				if (++loops > 100)
  120252:	3501      	adds	r5, #1
  120254:	042d      	lsls	r5, r5, #16
  120256:	0c2d      	lsrs	r5, r5, #16
  120258:	2d64      	cmp	r5, #100	; 0x64
  12025a:	d9eb      	bls.n	120234 <cmd_stop_timer+0x4c>
}
  12025c:	b009      	add	sp, #36	; 0x24
  12025e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			timer_id = handle[7] & 0xFFFF;
  120260:	69d8      	ldr	r0, [r3, #28]
  120262:	0400      	lsls	r0, r0, #16
  120264:	0c00      	lsrs	r0, r0, #16
		buf32[i] = intf->sys_stop_timer(timer_id);
  120266:	6eb3      	ldr	r3, [r6, #104]	; 0x68
  120268:	4798      	blx	r3
  12026a:	9b02      	ldr	r3, [sp, #8]
  12026c:	5118      	str	r0, [r3, r4]
  12026e:	e7eb      	b.n	120248 <cmd_stop_timer+0x60>

00120270 <cmd_fill_intf>:
	// data32[3] - intf length (words)
	// data32[*] - intf data

	uint32_t *intf32 = (uint32_t *)intf;

	for (uint8_t i = 0; i < data32[3]; i++) {
  120270:	2200      	movs	r2, #0
void cmd_fill_intf(FW_INTERFACE *intf, uint32_t request_id, uint32_t address, uint32_t *data32) {
  120272:	b510      	push	{r4, lr}
	for (uint8_t i = 0; i < data32[3]; i++) {
  120274:	68d9      	ldr	r1, [r3, #12]
  120276:	428a      	cmp	r2, r1
  120278:	d300      	bcc.n	12027c <cmd_fill_intf+0xc>
		// do not overwrite intf->search_performed
		intf32[1 + i] = data32[4 + 1];
	}
}
  12027a:	bd10      	pop	{r4, pc}
		intf32[1 + i] = data32[4 + 1];
  12027c:	3201      	adds	r2, #1
  12027e:	695c      	ldr	r4, [r3, #20]
  120280:	0091      	lsls	r1, r2, #2
	for (uint8_t i = 0; i < data32[3]; i++) {
  120282:	0612      	lsls	r2, r2, #24
		intf32[1 + i] = data32[4 + 1];
  120284:	500c      	str	r4, [r1, r0]
	for (uint8_t i = 0; i < data32[3]; i++) {
  120286:	0e12      	lsrs	r2, r2, #24
  120288:	e7f4      	b.n	120274 <cmd_fill_intf+0x4>
  12028a:	46c0      	nop			; (mov r8, r8)

0012028c <find_data>:
/* Copyright (c) Kuba SzczodrzyÅ„ski 2022-09-25. */

#include "dump.h"

uint8_t *find_data(uint8_t *start, uint8_t *end, uint8_t *data, uint8_t len) {
  12028c:	b570      	push	{r4, r5, r6, lr}
	uint8_t pos = 0;
  12028e:	2400      	movs	r4, #0
	for (uint8_t *addr = start; addr < end; addr++) {
  120290:	4288      	cmp	r0, r1
  120292:	d301      	bcc.n	120298 <find_data+0xc>
				return addr - len + 1;
		} else {
			pos = 0;
		}
	}
	return NULL;
  120294:	2000      	movs	r0, #0
  120296:	e00a      	b.n	1202ae <find_data+0x22>
		if (*addr == data[pos]) {
  120298:	7806      	ldrb	r6, [r0, #0]
  12029a:	5d15      	ldrb	r5, [r2, r4]
  12029c:	42ae      	cmp	r6, r5
  12029e:	d107      	bne.n	1202b0 <find_data+0x24>
			pos++;
  1202a0:	3401      	adds	r4, #1
  1202a2:	0624      	lsls	r4, r4, #24
  1202a4:	0e24      	lsrs	r4, r4, #24
			if (pos == len)
  1202a6:	429c      	cmp	r4, r3
  1202a8:	d103      	bne.n	1202b2 <find_data+0x26>
				return addr - len + 1;
  1202aa:	1b00      	subs	r0, r0, r4
  1202ac:	3001      	adds	r0, #1
}
  1202ae:	bd70      	pop	{r4, r5, r6, pc}
			pos = 0;
  1202b0:	2400      	movs	r4, #0
	for (uint8_t *addr = start; addr < end; addr++) {
  1202b2:	3001      	adds	r0, #1
  1202b4:	e7ec      	b.n	120290 <find_data+0x4>

001202b6 <find_word>:

uint8_t *find_word(uint8_t *start, uint8_t *end, uint32_t number) {
	for (uint8_t *addr = start; addr < end; addr += 4) {
  1202b6:	4288      	cmp	r0, r1
  1202b8:	d301      	bcc.n	1202be <find_word+0x8>
		if (*((uint32_t *)addr) == number) {
			return addr;
		}
	}
	return NULL;
  1202ba:	2000      	movs	r0, #0
}
  1202bc:	4770      	bx	lr
		if (*((uint32_t *)addr) == number) {
  1202be:	6803      	ldr	r3, [r0, #0]
  1202c0:	4293      	cmp	r3, r2
  1202c2:	d0fb      	beq.n	1202bc <find_word+0x6>
	for (uint8_t *addr = start; addr < end; addr += 4) {
  1202c4:	3004      	adds	r0, #4
  1202c6:	e7f6      	b.n	1202b6 <find_word>

001202c8 <find_short>:

uint8_t *find_short(uint8_t *start, uint8_t *end, uint16_t number) {
	start = THUMB_ADDR(start);
  1202c8:	2301      	movs	r3, #1
uint8_t *find_short(uint8_t *start, uint8_t *end, uint16_t number) {
  1202ca:	b510      	push	{r4, lr}
	start = THUMB_ADDR(start);
  1202cc:	4398      	bics	r0, r3
	for (uint8_t *addr = start; addr < end; addr += 2) {
  1202ce:	4288      	cmp	r0, r1
  1202d0:	d301      	bcc.n	1202d6 <find_short+0xe>
		uint16_t data = addr[0] | addr[1] << 8;
		if (data == number) {
			return addr;
		}
	}
	return NULL;
  1202d2:	2000      	movs	r0, #0
}
  1202d4:	bd10      	pop	{r4, pc}
		uint16_t data = addr[0] | addr[1] << 8;
  1202d6:	7844      	ldrb	r4, [r0, #1]
  1202d8:	7803      	ldrb	r3, [r0, #0]
  1202da:	0224      	lsls	r4, r4, #8
		if (data == number) {
  1202dc:	4323      	orrs	r3, r4
  1202de:	4293      	cmp	r3, r2
  1202e0:	d0f8      	beq.n	1202d4 <find_short+0xc>
	for (uint8_t *addr = start; addr < end; addr += 2) {
  1202e2:	3002      	adds	r0, #2
  1202e4:	e7f3      	b.n	1202ce <find_short+0x6>

001202e6 <find_short_rev>:

uint8_t *find_short_rev(uint8_t *start, uint8_t *end, uint16_t number) {
  1202e6:	b510      	push	{r4, lr}
	for (uint8_t *addr = end; addr > start; addr -= 2) {
  1202e8:	4281      	cmp	r1, r0
  1202ea:	d802      	bhi.n	1202f2 <find_short_rev+0xc>
		uint16_t data = addr[0] | addr[1] << 8;
		if (data == number) {
			return addr;
		}
	}
	return NULL;
  1202ec:	2100      	movs	r1, #0
}
  1202ee:	0008      	movs	r0, r1
  1202f0:	bd10      	pop	{r4, pc}
		uint16_t data = addr[0] | addr[1] << 8;
  1202f2:	784c      	ldrb	r4, [r1, #1]
  1202f4:	780b      	ldrb	r3, [r1, #0]
  1202f6:	0224      	lsls	r4, r4, #8
		if (data == number) {
  1202f8:	4323      	orrs	r3, r4
  1202fa:	4293      	cmp	r3, r2
  1202fc:	d0f7      	beq.n	1202ee <find_short_rev+0x8>
	for (uint8_t *addr = end; addr > start; addr -= 2) {
  1202fe:	3902      	subs	r1, #2
  120300:	e7f2      	b.n	1202e8 <find_short_rev+0x2>

00120302 <find_function>:

uint8_t *find_function(FW_INTERFACE *intf, uint8_t *start, uint8_t *end, char *string, uint16_t push_opcode) {
  120302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  120304:	001f      	movs	r7, r3
  120306:	ab06      	add	r3, sp, #24
	uint8_t len = strlen(string) + 1;
  120308:	0038      	movs	r0, r7
uint8_t *find_function(FW_INTERFACE *intf, uint8_t *start, uint8_t *end, char *string, uint16_t push_opcode) {
  12030a:	000c      	movs	r4, r1
  12030c:	0015      	movs	r5, r2
  12030e:	881e      	ldrh	r6, [r3, #0]
	uint8_t len = strlen(string) + 1;
  120310:	f000 f87a 	bl	120408 <strlen>
  120314:	1c43      	adds	r3, r0, #1

	LOG("Search %s\n", string);

	uint8_t *str_addr = find_data(start, end, (uint8_t *)string, len);
  120316:	061b      	lsls	r3, r3, #24
  120318:	0e1b      	lsrs	r3, r3, #24
  12031a:	003a      	movs	r2, r7
  12031c:	0029      	movs	r1, r5
  12031e:	0020      	movs	r0, r4
  120320:	f7ff ffb4 	bl	12028c <find_data>
	if (str_addr == NULL) {
  120324:	2800      	cmp	r0, #0
  120326:	d00f      	beq.n	120348 <find_function+0x46>
		LOG("Not found\n");
		return NULL;
	}
	LOG("Found %s %01x: %06x\n", string, 1, str_addr);

	uint8_t *str_offset_addr = find_word(start, end, (uint32_t)str_addr);
  120328:	0002      	movs	r2, r0
  12032a:	0029      	movs	r1, r5
  12032c:	0020      	movs	r0, r4
  12032e:	f7ff ffc2 	bl	1202b6 <find_word>
	if (str_offset_addr == NULL) {
  120332:	2800      	cmp	r0, #0
  120334:	d008      	beq.n	120348 <find_function+0x46>
		LOG("Not found\n");
		return NULL;
	}
	LOG("Found %s %01x: %06x\n", string, 2, str_offset_addr);

	uint8_t *func_addr = find_short_rev(start, str_offset_addr, push_opcode);
  120336:	0032      	movs	r2, r6
  120338:	0001      	movs	r1, r0
  12033a:	0020      	movs	r0, r4
  12033c:	f7ff ffd3 	bl	1202e6 <find_short_rev>
	if (func_addr == NULL) {
		LOG("Not found\n");
		return NULL;
	}
	LOG("Found %s %01x: %06x\n", string, 3, func_addr);
	return func_addr + 1;
  120340:	0003      	movs	r3, r0
  120342:	1e5a      	subs	r2, r3, #1
  120344:	4193      	sbcs	r3, r2
  120346:	18c0      	adds	r0, r0, r3
}
  120348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0012034a <find_app_intf>:

void find_app_intf(FW_INTERFACE *intf) {
  12034a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t **store = NULL;
	uint16_t *start, *end;

	start = (uint16_t *)THUMB_ADDR(intf->ap_cfg_send_err_code);
  12034c:	2301      	movs	r3, #1
void find_app_intf(FW_INTERFACE *intf) {
  12034e:	0004      	movs	r4, r0
	start = (uint16_t *)THUMB_ADDR(intf->ap_cfg_send_err_code);
  120350:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
	end	  = (uint16_t *)intf->ap_cfg_send_err_code_end;
  120352:	6d07      	ldr	r7, [r0, #80]	; 0x50
	start = (uint16_t *)THUMB_ADDR(intf->ap_cfg_send_err_code);
  120354:	439d      	bics	r5, r3
	for (uint16_t *data = start; data < end; data++) {
  120356:	42bd      	cmp	r5, r7
  120358:	d314      	bcc.n	120384 <find_app_intf+0x3a>
		store = NULL;
	}

	LOG("Found: create=%x, sendto=%x, close=%x\n", intf->socket, intf->sendto, intf->close);

	start = (uint16_t *)THUMB_ADDR(intf->sys_stop_timer);
  12035a:	2301      	movs	r3, #1
  12035c:	6ea5      	ldr	r5, [r4, #104]	; 0x68
	end	  = (uint16_t *)intf->sys_stop_timer_end;
  12035e:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
	start = (uint16_t *)THUMB_ADDR(intf->sys_stop_timer);
  120360:	439d      	bics	r5, r3
	for (uint16_t *data = start; data < end; data++) {
  120362:	42b5      	cmp	r5, r6
  120364:	d32f      	bcc.n	1203c6 <find_app_intf+0x7c>
		}
	}

	LOG("Found: tmr_hndl: %x\n", intf->sys_timer_handle);

	if (intf->socket && intf->sendto && intf->close && intf->sys_timer_handle)
  120366:	6d63      	ldr	r3, [r4, #84]	; 0x54
  120368:	2b00      	cmp	r3, #0
  12036a:	d03f      	beq.n	1203ec <find_app_intf+0xa2>
  12036c:	6e23      	ldr	r3, [r4, #96]	; 0x60
  12036e:	2b00      	cmp	r3, #0
  120370:	d03c      	beq.n	1203ec <find_app_intf+0xa2>
  120372:	6e63      	ldr	r3, [r4, #100]	; 0x64
  120374:	2b00      	cmp	r3, #0
  120376:	d039      	beq.n	1203ec <find_app_intf+0xa2>
  120378:	6f23      	ldr	r3, [r4, #112]	; 0x70
  12037a:	2b00      	cmp	r3, #0
  12037c:	d036      	beq.n	1203ec <find_app_intf+0xa2>
		intf->search_performed = 0xDEADBEEF;
  12037e:	4b1c      	ldr	r3, [pc, #112]	; (1203f0 <find_app_intf+0xa6>)
	else
		intf->search_performed = 0;
  120380:	6023      	str	r3, [r4, #0]
}
  120382:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (data[0] == 0x2001) {
  120384:	4b1b      	ldr	r3, [pc, #108]	; (1203f4 <find_app_intf+0xaa>)
  120386:	882a      	ldrh	r2, [r5, #0]
  120388:	2600      	movs	r6, #0
  12038a:	429a      	cmp	r2, r3
  12038c:	d102      	bne.n	120394 <find_app_intf+0x4a>
			store = (uint8_t **)&intf->socket;
  12038e:	0026      	movs	r6, r4
  120390:	3502      	adds	r5, #2
  120392:	3654      	adds	r6, #84	; 0x54
		if (data[0] == 0x425B) {
  120394:	4b18      	ldr	r3, [pc, #96]	; (1203f8 <find_app_intf+0xae>)
  120396:	882a      	ldrh	r2, [r5, #0]
  120398:	429a      	cmp	r2, r3
  12039a:	d102      	bne.n	1203a2 <find_app_intf+0x58>
			store = (uint8_t **)&intf->sendto;
  12039c:	0026      	movs	r6, r4
  12039e:	3502      	adds	r5, #2
  1203a0:	3660      	adds	r6, #96	; 0x60
		if (data[2] == 0x23A4) {
  1203a2:	4b16      	ldr	r3, [pc, #88]	; (1203fc <find_app_intf+0xb2>)
  1203a4:	88aa      	ldrh	r2, [r5, #4]
  1203a6:	429a      	cmp	r2, r3
  1203a8:	d109      	bne.n	1203be <find_app_intf+0x74>
			store = (uint8_t **)&intf->close;
  1203aa:	0026      	movs	r6, r4
  1203ac:	3664      	adds	r6, #100	; 0x64
			uint8_t *target_address = parse_branch(data);
  1203ae:	0028      	movs	r0, r5
  1203b0:	f7ff fe84 	bl	1200bc <parse_branch>
			if (target_address)
  1203b4:	2800      	cmp	r0, #0
  1203b6:	d004      	beq.n	1203c2 <find_app_intf+0x78>
				*store = target_address + 1;
  1203b8:	3001      	adds	r0, #1
  1203ba:	6030      	str	r0, [r6, #0]
  1203bc:	e001      	b.n	1203c2 <find_app_intf+0x78>
		if (store) {
  1203be:	2e00      	cmp	r6, #0
  1203c0:	d1f5      	bne.n	1203ae <find_app_intf+0x64>
	for (uint16_t *data = start; data < end; data++) {
  1203c2:	3502      	adds	r5, #2
  1203c4:	e7c7      	b.n	120356 <find_app_intf+0xc>
		if (data[1] == 0x1C29 && data[2] == 0x6818) {
  1203c6:	4b0e      	ldr	r3, [pc, #56]	; (120400 <find_app_intf+0xb6>)
  1203c8:	886a      	ldrh	r2, [r5, #2]
  1203ca:	429a      	cmp	r2, r3
  1203cc:	d10c      	bne.n	1203e8 <find_app_intf+0x9e>
  1203ce:	4b0d      	ldr	r3, [pc, #52]	; (120404 <find_app_intf+0xba>)
  1203d0:	88aa      	ldrh	r2, [r5, #4]
  1203d2:	429a      	cmp	r2, r3
  1203d4:	d108      	bne.n	1203e8 <find_app_intf+0x9e>
			uint32_t ***addr = (uint32_t ***)parse_ldr_pc(data, NULL);
  1203d6:	2100      	movs	r1, #0
  1203d8:	0028      	movs	r0, r5
  1203da:	f7ff fe82 	bl	1200e2 <parse_ldr_pc>
			if (addr == NULL)
  1203de:	2800      	cmp	r0, #0
  1203e0:	d002      	beq.n	1203e8 <find_app_intf+0x9e>
			intf->sys_timer_handle = **addr;
  1203e2:	6803      	ldr	r3, [r0, #0]
  1203e4:	681b      	ldr	r3, [r3, #0]
  1203e6:	6723      	str	r3, [r4, #112]	; 0x70
	for (uint16_t *data = start; data < end; data++) {
  1203e8:	3502      	adds	r5, #2
  1203ea:	e7ba      	b.n	120362 <find_app_intf+0x18>
		intf->search_performed = 0;
  1203ec:	2300      	movs	r3, #0
  1203ee:	e7c7      	b.n	120380 <find_app_intf+0x36>
  1203f0:	deadbeef 	.word	0xdeadbeef
  1203f4:	00002001 	.word	0x00002001
  1203f8:	0000425b 	.word	0x0000425b
  1203fc:	000023a4 	.word	0x000023a4
  120400:	00001c29 	.word	0x00001c29
  120404:	00006818 	.word	0x00006818

00120408 <strlen>:

#include "dump.h"

uint8_t strlen(char *str) {
	uint8_t len = 0;
	while (*(str++)) {
  120408:	2300      	movs	r3, #0
  12040a:	5cc1      	ldrb	r1, [r0, r3]
  12040c:	061a      	lsls	r2, r3, #24
  12040e:	0e12      	lsrs	r2, r2, #24
  120410:	3301      	adds	r3, #1
  120412:	2900      	cmp	r1, #0
  120414:	d1f9      	bne.n	12040a <strlen+0x2>
		len++;
	}
	return len;
}
  120416:	0010      	movs	r0, r2
  120418:	4770      	bx	lr
